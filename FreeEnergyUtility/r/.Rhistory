R = sort(unique(paste0("(",as.character(c(A[,1],A[,3])),",",as.character(c(A[,2],A[,4])),")")))
R=strsplit(R,split="\\(")
R
R = sort(unique(paste0("(",as.character(c(A[,1],A[,3])),",",as.character(c(A[,2],A[,4])),")")))
R=strsplit(R,split="\\(,\\)")
R
?strsplit
R = sort(unique(paste0("(",as.character(c(A[,1],A[,3])),",",as.character(c(A[,2],A[,4])),")")))
strsplit(R,split=c("\\(",",","\\)")
)
strsplit(R,split=c("\\(",",","\\)"))
R = sort(unique(paste0(as.character(c(A[,1],A[,3])),"\t",as.character(c(A[,2],A[,4])))))
strsplit(R,split="\t")
R = do.call(rbind,R)
R=strsplit(R,split="\t")
R = do.call(rbind,R)
d = as.numeric(R[,1])
d
z_energy = matrix(Inf,nrow=max(d/x_scale)+1,ncol=max(a)/y_scale+1) # free energy infinite where inaccessible
nrow(z_energy)
x_scale
x_scale=1/33
d/x_scae
d/x_scale
z_energy = matrix(Inf,nrow=max(d)/x_scale+1,ncol=max(a)/y_scale+1) # free energy infinite where inaccessible
y_scale=0.1
z_energy = matrix(Inf,nrow=max(d)/x_scale+1,ncol=max(a)/y_scale+1) # free energy infinite where inaccessible
z_error = matrix(Inf,nrow=nrow(z_energy),ncol=ncol(z_energy))
x = (0:nrow(z_energy))*x_scale
y = (0:ncol(z_energy))*y_scale
O_energy = matrix("",nrow=nrow(z_energy),ncol=ncol(z_energy))
O_error = matrix("",nrow=nrow(z_energy),ncol=ncol(z_energy))
d
d = as.numeric(R[,1])/x_scale
a = as.numeric(R[,2])/y_scale
d
a
x
y
source('C:/Users/Scott/git/SWEN20030/FreeEnergyUtility/r/runFreeEnergyUtility.r')
source('C:/Users/Scott/git/SWEN20030/FreeEnergyUtility/r/FreeEnergyUtility.r')
source('C:/Users/Scott/git/SWEN20030/FreeEnergyUtility/r/FreeEnergyUtility.r')
source('C:/Users/Scott/git/SWEN20030/FreeEnergyUtility/r/runFreeEnergyUtility.r')
source('C:/Users/Scott/git/SWEN20030/FreeEnergyUtility/r/runFreeEnergyUtility.r')
filename
args[7]
args[8]
A=read.table(paste0("../dat/",args[8])
)
non_zero = apply(A, 1, function(row) row[5] !=0 )
A=A[non_zero,]
## Assuming 2D bin names, conjoin them to create 1D
R = sort(unique(paste0(as.character(c(A[,1],A[,3])),"\t",as.character(c(A[,2],A[,4])))))
## Create count matrix including all possible states in data set
n = length(R)
Z = matrix(0,nrow=n,ncol=n)
rownames(Z)=R
colnames(Z)=R
for (i in 1:nrow(A)) {
Z[match(paste0(as.character(A[i,1]),"\t",as.character(A[i,2])),R),match(paste0(as.character(A[i,3]),"\t",as.character(A[i,4])),R)]=A[i,5]
}
## Remove empty rows
non_zero = apply(Z,1,function(row) sum(row)!=0) | apply(Z,2,function(col) sum(col)!=0)
Z = Z[non_zero,non_zero]
R = R[non_zero]
n=nrow(Z)
# Generate Dirichlet parameters and associated expected probability matrix
alpha = matrix(1,n,n) # using a uniform prior
alpha[apply(Z, 1, function(row) sum(row)==0)] = 0
u = alpha+Z
w = rowSums(u)
w[sapply(w, function(row) sum(row)==0)] = 1
T = u/w
## Find eigenthings. The largest eigenvalue of T must be 1
B = eigen(t(T))
lambda = B$values[1]
# eigenvalues are in descending order; the first one is steady state
if (abs(lambda-1) > TOLERANCE) {
message(sprintf("Note: eigenvalue of q == %f != 1",lambda))
}
q=B$vectors[,1]
stopifnot(Re(q)==q) # probabilities should be real
q = abs(Re(q))
## Create the free energy vector
G = -K*t*log(q/max(q))
R = R[is.finite(G)]
G = G[is.finite(G)]
G
q_sd = if (sample) SampleStandardDeviation(u,n,samples=10) else CalculateStandardDeviation(u,w,T,n,q)
G_sd = K*t*sqrt((q_sd/q)^2+(q_sd[which.max(q)]/max(q))^2)
## Convert to meaningful format. Cluster 235 refers to d=23, a=0.5
R = strsplit(R,split="\t")
R = do.call(rbind,R)
d = as.numeric(R[,1])/x_scale
a = as.numeric(R[,2])/y_scale
d
a
z_energy = matrix(Inf,nrow=max(d)+1,ncol=max(a)+1) # free energy infinite where inaccessible
z_error = matrix(Inf,nrow=nrow(z_energy),ncol=ncol(z_energy))
x = (0:(nrow(z_energy)-1))*x_scale
y = (0:(ncol(z_energy)-1))*y_scale
O_energy = matrix("",nrow=nrow(z_energy),ncol=ncol(z_energy))
O_error = matrix("",nrow=nrow(z_energy),ncol=ncol(z_energy))
for (i in 1:length(G)) {
z_energy[d[i]+1,a[i]+1]=G[i]
z_error[d[i]+1,a[i]+1]=G_sd[i]
O_energy[d[i]+1,a[i]+1]=sprintf("%f",G[i])
O_error[d[i]+1,a[i]+1]=sprintf("%f +- %f",G[i],G_sd[i])
}
z_energy
source('C:/Users/Scott/git/SWEN20030/FreeEnergyUtility/r/modifyInput.r')
source('C:/Users/Scott/git/SWEN20030/FreeEnergyUtility/r/modifyInput.r')
source('C:/Users/Scott/git/SWEN20030/FreeEnergyUtility/r/runFreeEnergyUtility.r')
source('C:/Users/Scott/git/SWEN20030/FreeEnergyUtility/r/runFreeEnergyUtility.r')
source('C:/Users/Scott/git/SWEN20030/FreeEnergyUtility/r/runFreeEnergyUtility.r')
A
A=read.table(paste0("../dat/",args[8])
)
A
source('C:/Users/Scott/git/SWEN20030/FreeEnergyUtility/r/modifyInput.r')
source('C:/Users/Scott/git/SWEN20030/FreeEnergyUtility/r/modifyInput.r')
args
source('C:/Users/Scott/git/SWEN20030/FreeEnergyUtility/r/modifyInput.r')
source('C:/Users/Scott/git/SWEN20030/FreeEnergyUtility/r/runFreeEnergyUtility.r')
A=read.table(paste0("../dat/",args[8])
)
A
non_zero = apply(A, 1, function(row) row[5] !=0 )
A=A[non_zero,]
## Assuming 2D bin names, conjoin them to create 1D
R = sort(unique(paste0(as.character(c(A[,1],A[,3])),"\t",as.character(c(A[,2],A[,4])))))
## Create count matrix including all possible states in data set
x_scale
y_scale
n = length(R)
Z = matrix(0,nrow=n,ncol=n)
rownames(Z)=R
colnames(Z)=R
for (i in 1:nrow(A)) {
Z[match(paste0(as.character(A[i,1]),"\t",as.character(A[i,2])),R),match(paste0(as.character(A[i,3]),"\t",as.character(A[i,4])),R)]=A[i,5]
}
## Remove empty rows
non_zero = apply(Z,1,function(row) sum(row)!=0) | apply(Z,2,function(col) sum(col)!=0)
Z = Z[non_zero,non_zero]
R = R[non_zero]
R
n=nrow(Z)
# Generate Dirichlet parameters and associated expected probability matrix
alpha = matrix(1,n,n) # using a uniform prior
alpha[apply(Z, 1, function(row) sum(row)==0)] = 0
u = alpha+Z
w = rowSums(u)
w[sapply(w, function(row) sum(row)==0)] = 1
T = u/w
## Find eigenthings. The largest eigenvalue of T must be 1
B = eigen(t(T))
lambda = B$values[1]
# eigenvalues are in descending order; the first one is steady state
if (abs(lambda-1) > TOLERANCE) {
message(sprintf("Note: eigenvalue of q == %f != 1",lambda))
}
q=B$vectors[,1]
stopifnot(Re(q)==q) # probabilities should be real
q = abs(Re(q))
## Create the free energy vector
G = -K*t*log(q/max(q))
R = R[is.finite(G)]
G = G[is.finite(G)]
q_sd = if (sample) SampleStandardDeviation(u,n,samples=10) else CalculateStandardDeviation(u,w,T,n,q)
G_sd = K*t*sqrt((q_sd/q)^2+(q_sd[which.max(q)]/max(q))^2)
G
## Convert to meaningful format. Cluster 235 refers to d=23, a=0.5
R = strsplit(R,split="\t")
R = do.call(rbind,R)
d = as.numeric(R[,1])/x_scale
a = as.numeric(R[,2])/y_scale
d
R
R = sort(unique(paste0(as.character(c(A[,1],A[,3])),"\t",as.character(c(A[,2],A[,4])))))
R
A=read.table("../dat/select_above_delete_yes_5_not-normalized.dat")
non_zero = apply(A, 1, function(row) row[3] !=0 )
A=A[non_zero,]
R = sort(unique(c(A[,1],A[,2]))) # record row numbers
R
filename=args[8]
A = read.table(paste0(DAT_PREFIX,filename))
## For especially large data sets, better to remove all zero data first
non_zero = apply(A, 1, function(row) row[5] !=0 )
A=A[non_zero,]
## Assuming 2D bin names, conjoin them to create 1D
R = sort(unique(paste0(as.character(c(A[,1],A[,3])),"\t",as.character(c(A[,2],A[,4])))))
R
source('~/.active-rstudio-document')
R = sort(unique(paste0(as.character(c(A[,1],A[,3]))," ",as.character(c(A[,2],A[,4])))))
R
R = sort(unique(paste0(as.character(c(A[,1],A[,3])),"$",as.character(c(A[,2],A[,4])))))
R
R = sort(unique(paste0(as.character(c(A[,1],A[,3])),":",as.character(c(A[,2],A[,4])))))
R
Rx = sort(unique(c(A[,1],A[,3])))/x_scale
Ry = sort(unique(c(A[,2],A[,4])))/y_scale
Rx
Ry
1/y_scale
y_max = max(c(A[,2],A[,4])/y_scale)+1
y_max
R = sort(unique((c(A[,1],A[,3])*y_max)/x_scale + c(A[,2],A[,4])/y_scale))
R
n = length(R)
Z = matrix(0,nrow=n,ncol=n)
rownames(Z)=R
colnames(Z)=R
for (i in 1:nrow(A)) {
Z[match(A[i,1]*y_max/x_scale + A[i,2]/y_scale,R),match(A[i,1]*y_max/x_scale + A[i,2]/y_scale,R)]=A[i,5]
}
Z
non_zero = apply(Z,1,function(row) sum(row)!=0) | apply(Z,2,function(col) sum(col)!=0)
Z = Z[non_zero,non_zero]
R = R[non_zero]
n=nrow(Z)
n
alpha = matrix(1,n,n) # using a uniform prior
alpha[apply(Z, 1, function(row) sum(row)==0)] = 0
u = alpha+Z
w = rowSums(u)
w[sapply(w, function(row) sum(row)==0)] = 1
T = u/w
R
filename
filename2 = "../dat/select_above_delete_yes_5_not-normalized.dat"
A=read.table(filename2)
non_zero = apply(A, 1, function(row) row[3] !=0 )
A=A[non_zero,]
R = sort(unique(c(A[,1],A[,2]))) # record row numbers
## Create count matrix including all possible states in data set
n = length(R)
Z = matrix(0,nrow=n,ncol=n)
rownames(Z)=R
colnames(Z)=R
for (i in 1:nrow(A)) {
Z[match(A[i,1],R),match(A[i,2],R)]=A[i,3]
}
## Remove empty rows
non_zero = apply(Z,1,function(row) sum(row)!=0) | apply(Z,2,function(col) sum(col)!=0)
Z = Z[non_zero,non_zero]
R = R[non_zero]
n=nrow(Z)
R
filename
A = read.table(paste0(DAT_PREFIX,filename))
## For especially large data sets, better to remove all zero data first
non_zero = apply(A, 1, function(row) row[5] !=0 )
A=A[non_zero,]
## Assuming 2D bin names, conjoin them to create 1D
y_max = max(c(A[,2],A[,4])/y_scale)+1
R = sort(unique((c(A[,1],A[,3])*y_max)/x_scale + c(A[,2],A[,4])/y_scale))
R
n = length(R)
Z = matrix(0,nrow=n,ncol=n)
rownames(Z)=R
colnames(Z)=R
for (i in 1:nrow(A)) {
Z[match(A[i,1]*y_max/x_scale + A[i,2]/y_scale,R),match(A[i,1]*y_max/x_scale + A[i,2]/y_scale,R)]=A[i,5]
}
for (i in 1:nrow(A)) {
Z[match((A[i,1]*y_max)/x_scale + A[i,2]/y_scale,R),match((A[i,3]*y_max)/x_scale + A[i,4]/y_scale,R)]=A[i,5]
}
## Remove empty rows
non_zero = apply(Z,1,function(row) sum(row)!=0) | apply(Z,2,function(col) sum(col)!=0)
Z = Z[non_zero,non_zero]
R = R[non_zero]
n=nrow(Z)
R
d = R*x_scale/y_max
d
d = floor(R*x_scale/y_max)
d
d2 = floor(R/alpha_scale)
d2 == d
a = R*y_scale%%x_scale
a
R*y_scale
(R*y_scale)%%x_scale
z_energy = matrix(Inf,nrow=max(d)+1,ncol=max(a)+1) # free energy infinite where inaccessible
z_error = matrix(Inf,nrow=nrow(z_energy),ncol=ncol(z_energy))
x = (0:(nrow(z_energy)-1))*x_scale
y = (0:(ncol(z_energy)-1))*y_scale
x
y
a
a = (R*y_scale)%%x_scale
a
z_energy = matrix(Inf,nrow=max(d)+1,ncol=max(a)+1) # free energy infinite where inaccessible
z_error = matrix(Inf,nrow=nrow(z_energy),ncol=ncol(z_energy))
x = (0:(nrow(z_energy)-1))*x_scale
y = (0:(ncol(z_energy)-1))*y_scale
y
a
d = floor(R*x_scale/y_max)
d
a
a = ((R*y_scale)%%x_scale)/y_scale
a
y_max
a = R%%y_max
a
d
10*d+a==R
z_energy = matrix(Inf,nrow=max(d)+1,ncol=max(a)+1) # free energy infinite where inaccessible
z_error = matrix(Inf,nrow=nrow(z_energy),ncol=ncol(z_energy))
x = (0:(nrow(z_energy)-1))*x_scale
y = (0:(ncol(z_energy)-1))*y_scale
x
y
O_energy = matrix("",nrow=nrow(z_energy),ncol=ncol(z_energy))
O_error = matrix("",nrow=nrow(z_energy),ncol=ncol(z_energy))
for (i in 1:length(G)) {
z_energy[d[i]+1,a[i]+1]=G[i]
z_error[d[i]+1,a[i]+1]=G_sd[i]
O_energy[d[i]+1,a[i]+1]=sprintf("%f",G[i])
O_error[d[i]+1,a[i]+1]=sprintf("%f +- %f",G[i],G_sd[i])
}
## Print to a data file
rownames(O_energy) = x
colnames(O_energy) = y
write.table(t(O_energy),sprintf("%s%s%s",DAT_PREFIX,OUTPUT_PREFIX,filename),sep="\t",col.names=NA)
write.table(t(O_energy),sprintf("%s%s%s",DAT_PREFIX,OUTPUT_PREFIX,filename),sep="\t",col.names=NA)
source('C:/Users/Scott/git/SWEN20030/FreeEnergyUtility/r/runFreeEnergyUtility.r')
source('C:/Users/Scott/git/SWEN20030/FreeEnergyUtility/r/modifyInput.r')
source('C:/Users/Scott/git/SWEN20030/FreeEnergyUtility/r/runFreeEnergyUtility.r')
A = read.table(paste0(DAT_PREFIX,filename))
filename
filename=args[8]
A = read.table(paste0(DAT_PREFIX,filename))
non_zero = apply(A, 1, function(row) row[5] !=0 )
A=A[non_zero,]
## Assuming 2D bin names, conjoin them to create 1D
y_max = max(c(A[,2],A[,4])/y_scale)+1
R = sort(unique((c(A[,1],A[,3])*y_max)/x_scale + c(A[,2],A[,4])/y_scale))
R
n = length(R)
Z = matrix(0,nrow=n,ncol=n)
rownames(Z)=R
colnames(Z)=R
for (i in 1:nrow(A)) {
Z[match((A[i,1]*y_max)/x_scale + A[i,2]/y_scale,R),match((A[i,3]*y_max)/x_scale + A[i,4]/y_scale,R)]=A[i,5]
}
## Remove empty rows
non_zero = apply(Z,1,function(row) sum(row)!=0) | apply(Z,2,function(col) sum(col)!=0)
Z = Z[non_zero,non_zero]
R = R[non_zero]
n=nrow(Z)
R
# Generate Dirichlet parameters and associated expected probability matrix
alpha = matrix(1,n,n) # using a uniform prior
alpha[apply(Z, 1, function(row) sum(row)==0)] = 0
u = alpha+Z
w = rowSums(u)
w[sapply(w, function(row) sum(row)==0)] = 1
T = u/w
## Find eigenthings. The largest eigenvalue of T must be 1
B = eigen(t(T))
lambda = B$values[1]
# eigenvalues are in descending order; the first one is steady state
if (abs(lambda-1) > TOLERANCE) {
message(sprintf("Note: eigenvalue of q == %f != 1",lambda))
}
q=B$vectors[,1]
stopifnot(Re(q)==q) # probabilities should be real
q = abs(Re(q))
## Create the free energy vector
G = -K*t*log(q/max(q))
R = R[is.finite(G)]
G = G[is.finite(G)]
q_sd = if (sample) SampleStandardDeviation(u,n,samples=10) else CalculateStandardDeviation(u,w,T,n,q)
G_sd = K*t*sqrt((q_sd/q)^2+(q_sd[which.max(q)]/max(q))^2)
R
## Convert to meaningful format. Cluster 235 refers to d=23, a=0.5
d = floor(R*x_scale/y_max)/x_scale
d
x_scale
y_max
R
R/x_scale
R*x_scale
R/y_max
d = floor(R/y_max)*x_scale
d
d = floor(R/y_max)
d
z_energy = matrix(Inf,nrow=max(d)+1,ncol=max(a)+1) # free energy infinite where inaccessible
z_error = matrix(Inf,nrow=nrow(z_energy),ncol=ncol(z_energy))
x = (0:(nrow(z_energy)-1))*x_scale
y = (0:(ncol(z_energy)-1))*y_scale
O_energy = matrix("",nrow=nrow(z_energy),ncol=ncol(z_energy))
O_error = matrix("",nrow=nrow(z_energy),ncol=ncol(z_energy))
for (i in 1:length(G)) {
z_energy[d[i]+1,a[i]+1]=G[i]
z_error[d[i]+1,a[i]+1]=G_sd[i]
O_energy[d[i]+1,a[i]+1]=sprintf("%f",G[i])
O_error[d[i]+1,a[i]+1]=sprintf("%f +- %f",G[i],G_sd[i])
}
## Print to a data file
rownames(O_energy) = x
colnames(O_energy) = y
write.table(t(O_energy),sprintf("%s%s%s",DAT_PREFIX,OUTPUT_PREFIX,filename),sep="\t",col.names=NA)
source('C:/Users/Scott/git/SWEN20030/FreeEnergyUtility/r/runFreeEnergyUtility.r')
source('C:/Users/Scott/git/SWEN20030/FreeEnergyUtility/r/runFreeEnergyUtility.r')
source('C:/Users/Scott/git/SWEN20030/FreeEnergyUtility/r/modifyInput.r')
source('C:/Users/Scott/git/SWEN20030/FreeEnergyUtility/r/runFreeEnergyUtility.r')
filename
filename=args[8]
filename
A = read.table(paste0(DAT_PREFIX,filename))
## For especially large data sets, better to remove all zero data first
non_zero = apply(A, 1, function(row) row[5] !=0 )
A=A[non_zero,]
## Assuming 2D bin names, conjoin them to create 1D
y_max = max(c(A[,2],A[,4])/y_scale)+1
R = sort(unique((c(A[,1],A[,3])*y_max)/x_scale + c(A[,2],A[,4])/y_scale))
x_scale
## Create count matrix including all possible states in data set
n = length(R)
Z = matrix(0,nrow=n,ncol=n)
rownames(Z)=R
colnames(Z)=R
for (i in 1:nrow(A)) {
Z[match((A[i,1]*y_max)/x_scale + A[i,2]/y_scale,R),match((A[i,3]*y_max)/x_scale + A[i,4]/y_scale,R)]=A[i,5]
}
## Remove empty rows
non_zero = apply(Z,1,function(row) sum(row)!=0) | apply(Z,2,function(col) sum(col)!=0)
Z = Z[non_zero,non_zero]
R = R[non_zero]
n=nrow(Z)
# Generate Dirichlet parameters and associated expected probability matrix
alpha = matrix(1,n,n) # using a uniform prior
alpha[apply(Z, 1, function(row) sum(row)==0)] = 0
u = alpha+Z
w = rowSums(u)
w[sapply(w, function(row) sum(row)==0)] = 1
T = u/w
## Find eigenthings. The largest eigenvalue of T must be 1
B = eigen(t(T))
lambda = B$values[1]
# eigenvalues are in descending order; the first one is steady state
if (abs(lambda-1) > TOLERANCE) {
message(sprintf("Note: eigenvalue of q == %f != 1",lambda))
}
q=B$vectors[,1]
stopifnot(Re(q)==q) # probabilities should be real
q = abs(Re(q))
## Create the free energy vector
G = -K*t*log(q/max(q))
R = R[is.finite(G)]
G = G[is.finite(G)]
q_sd = if (sample) SampleStandardDeviation(u,n,samples=10) else CalculateStandardDeviation(u,w,T,n,q)
G_sd = K*t*sqrt((q_sd/q)^2+(q_sd[which.max(q)]/max(q))^2)
## Convert to meaningful format. Cluster 235 refers to d=23, a=0.5
d = floor(R/y_max)
a = R%%y_max
z_energy = matrix(Inf,nrow=max(d)+1,ncol=max(a)+1) # free energy infinite where inaccessible
z_error = matrix(Inf,nrow=nrow(z_energy),ncol=ncol(z_energy))
x = (0:(nrow(z_energy)-1))*x_scale
y = (0:(ncol(z_energy)-1))*y_scale
O_energy = matrix("",nrow=nrow(z_energy),ncol=ncol(z_energy))
O_error = matrix("",nrow=nrow(z_energy),ncol=ncol(z_energy))
for (i in 1:length(G)) {
z_energy[d[i]+1,a[i]+1]=G[i]
z_error[d[i]+1,a[i]+1]=G_sd[i]
O_energy[d[i]+1,a[i]+1]=sprintf("%f",G[i])
O_error[d[i]+1,a[i]+1]=sprintf("%f +- %f",G[i],G_sd[i])
}
## Print to a data file
rownames(O_energy) = x
colnames(O_energy) = y
write.table(t(O_energy),sprintf("%s%s%s",DAT_PREFIX,OUTPUT_PREFIX,filename),sep="\t",col.names=NA)
rownames(O_error) = x
colnames(O_error) = y
write.table(t(O_error),sprintf("%s%serror_%s",DAT_PREFIX,OUTPUT_PREFIX,filename),sep="\t",col.names=NA)
## Run Java code to find shortest path
if (x_coord < 0) x_coord = length(x) + x_coord + 1 else x_coord = match(x_coord,x)
if (y_coord < 0) y_coord = length(y) + y_coord + 1 else y_coord = match(y_coord,y)
system(sprintf("java -jar ../MinimumFreeEnergyPath.jar %s%s%s %f %f",DAT_PREFIX,OUTPUT_PREFIX,filename,x[x_coord],y[y_coord]))
# Plot the shortest path line graph
path = read.table(paste0(DAT_PREFIX,OUTPUT_PREFIX,filename,PATH_SUFFIX))
path_x = c(0:(nrow(path)-1))
path_y = path[,3]
path_sd = G_sd[match(alpha_scale*(path[,1]+path[,2]),R)]
df = data.frame(path_x,path_y,path_sd)
plot = ggplot(df, aes(x=path_x, y=path_y)) + geom_line() + geom_errorbar(data = df, aes(x=path_x, y=path_y, ymin = path_y-path_sd, ymax = path_y+path_sd), colour = 'red', width=0.4) + xlab("Path Length (bins)") + ylab("Gibbs Free Energy (kcal/mol)") + ggtitle(paste0("Most Probable Folding Path\n\n",filename))
suppressMessages(ggsave(sprintf("%s%s%s%s.pdf",PDF_PREFIX,OUTPUT_PREFIX,PATH_PREFIX,filename), plot))
pdf(sprintf("%s%s%s.pdf",PDF_PREFIX,OUTPUT_PREFIX,filename))
filled.contour(x,y,z_energy,main="Free Energy (kcal/mol)", sub=filename,xlab=x_lab,ylab=y_lab, color.palette=colorRampPalette(c("red","yellow","green","cyan","blue","purple")), nlevels = 100, plot.axes={lines(path[,1],path[,2],type="l",col="black",lty=1,lwd=3); axis(1); axis(2)})
dev.off()
pdf(sprintf("%s%serror_%s.pdf",PDF_PREFIX,OUTPUT_PREFIX, filename))
filled.contour(x,y,z_error,main="Free Energy Absolute Error (kcal/mol)", sub=filename,xlab=x_lab,ylab=y_lab, color.palette=colorRampPalette(c("red","yellow","green","cyan","blue","purple")), nlevels = 100)
dev.off()
filename
pdf(sprintf("%s%s%s.pdf",PDF_PREFIX,OUTPUT_PREFIX,filename))
filled.contour(x,y,z_energy,main="Free Energy (kcal/mol)", sub=filename,xlab=x_lab,ylab=y_lab, color.palette=colorRampPalette(c("red","yellow","green","cyan","blue","purple")), nlevels = 100, plot.axes={lines(path[,1],path[,2],type="l",col="black",lty=1,lwd=3); axis(1); axis(2)})
dev.off()
pdf(sprintf("%s%serror_%s.pdf",PDF_PREFIX,OUTPUT_PREFIX, filename))
filled.contour(x,y,z_error,main="Free Energy Absolute Error (kcal/mol)", sub=filename,xlab=x_lab,ylab=y_lab, color.palette=colorRampPalette(c("red","yellow","green","cyan","blue","purple")), nlevels = 100)
dev.off()
source('C:/Users/Scott/git/SWEN20030/FreeEnergyUtility/r/runFreeEnergyUtility.r')
setwd("C:/Users/Scott/git/SWEN20030/FreeEnergyUtility/r")
source('C:/Users/Scott/git/SWEN20030/FreeEnergyUtility/r/FreeEnergyUtility.r')
source('C:/Users/Scott/git/SWEN20030/FreeEnergyUtility/r/FreeEnergyUtility.r')
source('C:/Users/Scott/git/SWEN20030/FreeEnergyUtility/r/FreeEnergyUtility.r')
args
source('C:/Users/Scott/git/SWEN20030/FreeEnergyUtility/r/runFreeEnergyUtility.r')
